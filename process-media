#!/usr/bin/perl

use strict;
use warnings;

require 5.010;

use Getopt::Long qw/GetOptions/;
use MIME::Types;
use Sys::CPU qw/cpu_count/;
use Term::ReadKey qw/ReadKey ReadMode/;
use threads;
use threads::shared;
use Thread::Queue;
use Time::HiRes qw/sleep/;
use YAML::Tiny;

# Own modules
use lib './lib';
use Llavaud::Process::Media::Photo;
use Llavaud::Process::Media::Video;

local $SIG{'INT'}  = \&sig_handler;
local $SIG{'TERM'} = \&sig_handler;

## VARS

my $config_file;
my $path;
my @threads;
my @objects;
my $opts = {};
our %OPTIONS;

## MAIN

GetOptions(
    $opts,
    'type=s',
    'format=s',
    'config=s',
    'max_threads=i',
    'batch',
    'keep_name',
    'verbose',
    'overwrite',
    'help',
) or die "Error in command line arguments\n";

if (defined $opts->{'config'}) {
    die "Config file \'$opts->{'config'}\' not found\n" unless -f $opts->{'config'};
    $config_file = $opts->{'config'};
} else {
    $config_file = (-f '/etc/process-media.yaml') ? '/etc/process-media.yaml' : 'process-media.yaml';
}

my $conf = YAML::Tiny->read($config_file);

&check_conf();

&check_params();

&set_options();

&get_objects();

if (scalar @objects == 0) {
    print "No files to process, Exiting...\n" if $OPTIONS{'batch'} eq 'false';
    exit 0;
} else {
    if ($OPTIONS{'batch'} eq 'false') {
        print "Found ".scalar @objects." files...\n";
        ReadMode 4;
        my $key = '';
        while($key !~ /^(?:y|n)$/) {
            1 while defined ReadKey -1; # discard any previous input
            print "Proceed ? (y/n): ";
            $key = ReadKey 0;
            print "$key\n";
        }
        ReadMode 0;

        exit 0 if $key ne 'y';
    }
}

my $queue_todo = Thread::Queue->new();
my $queue_done = Thread::Queue->new();

my $run: shared = 1;
$queue_todo->enqueue($_) for @objects;

# start threads
while ($OPTIONS{'max_threads'} >= 1) {
    push @threads, threads->new(\&thread);
    $OPTIONS{'max_threads'}--;
}

# wait first run to finish
sleep 0.05 while $queue_done->pending() < scalar @objects;

$queue_done->end;

# search duplicate name
'Llavaud::Process::Media::Photo'->search_duplicate(@objects);
'Llavaud::Process::Media::Video'->search_duplicate(@objects);

$run = 2;
$queue_todo->enqueue($_) for @objects;
$queue_todo->end;

# waiting for threads to finish
$_->join for @threads;

exit 0;

## FUNCTIONS

sub thread {

    local $SIG{'INT'} = sub { threads->exit(); };

    while (my $obj = $queue_todo->dequeue) {
        if ($run == 1) {
            $obj->get_name();
            $queue_done->enqueue($obj)
        }
        elsif ($run == 2) {
            $obj->exist();
            $obj->create();
            $obj->process();
            $obj->strip();
            $obj->thumbnail() if ref($obj) eq 'Video';
            $obj->integrity();
        }
    }

    return 1;
}

sub sig_handler {
    my $signame = shift;

    # send SIGINT to all running threads and detach it
    foreach my $thr (threads->list) {
        $thr->kill('INT')->detach();
    }

    die "Received a SIG$signame, Exiting...\n";
}

sub set_options {

    $path = $ARGV[0] // './';

    # max_threads
    if (defined $opts->{'max_threads'}) {
        $OPTIONS{'max_threads'} = ($opts->{'max_threads'} == 0) ? Sys::CPU::cpu_count() : $opts->{'max_threads'};
    } else {
        $OPTIONS{'max_threads'} = ($conf->[0]->{'max_threads'} == 0) ? Sys::CPU::cpu_count() : $conf->[0]->{'max_threads'};
    }

    # verbose
    $OPTIONS{'verbose'} = $opts->{'verbose'} ? 'true' : $conf->[0]->{'verbose'};
    
    # overwrite
    $OPTIONS{'overwrite'} = $opts->{'overwrite'} ? 'true' : $conf->[0]->{'overwrite'};

    # keep_name
    $OPTIONS{'keep_name'} = $opts->{'keep_name'} ? 'true' : $conf->[0]->{'keep_name'};

    # batch
    $OPTIONS{'batch'} = $opts->{'batch'} ? 'true' : 'false';

    $OPTIONS{'type'} = $opts->{'type'} // '';

    if (not defined $opts->{'type'}) {
        if (defined $opts->{'format'}) {
            my %t;
            foreach (split(',', $opts->{'format'})) {
                $t{$conf->[1]->{$_}->{'type'}} = 1;
            }
            $OPTIONS{'type'} = join(',', keys %t);
        } else {
            my %t;
            foreach (keys %{ $conf->[1] }) {
                $t{$conf->[1]->{$_}->{'type'}} = 1;
            }
            $OPTIONS{'type'} = join(',', keys %t);
        }
    }

	if (defined $opts->{'format'}) {
        foreach my $fname (split(',', $opts->{'format'})) {
			foreach my $t (split(',', $OPTIONS{'type'})) {
				$OPTIONS{'format'}{$fname} = $conf->[1]->{$fname}
					if $conf->[1]->{$fname}->{'type'} eq $t;
			}
        }
    } else {
		foreach my $fname (keys %{ $conf->[1] }) {
			foreach my $t (split(',', $OPTIONS{'type'})) {
				$OPTIONS{'format'}{$fname} = $conf->[1]->{$fname}
					if $conf->[1]->{$fname}->{'type'} eq $t;
			}
		}
	}

    die "No format found with your type and format combination\n"
        if not exists $OPTIONS{'format'};

	return 1;
}

sub check_conf {

    # options
    foreach (keys %{ $conf->[0] }) {
        die "Unknown options '$_' in config file\n"
            if $_ !~ /^(?:overwrite|max_threads|keep_name|verbose)$/;

        # max_threads
        die "Miss/Bad value for '$_' in config file\n"
            if $_ eq 'max_threads' and $conf->[0]->{$_} !~ /^\d+$/;

        # keep_name
        die "Miss/Bad value for '$_' in config file\n"
            if $_ eq 'keep_name' and $conf->[0]->{$_} !~ /^(?:true|false)$/;

        # verbose
        die "Miss/Bad value for '$_' in config file\n"
            if $_ eq 'verbose' and $conf->[0]->{$_} !~ /^(?:true|false)$/;

        # overwrite
        die "Miss/Bad value for '$_' in config file\n"
            if $_ eq 'overwrite' and $conf->[0]->{$_} !~ /^(?:true|false)$/;
    }

    foreach ('overwrite', 'max_threads', 'keep_name', 'verbose') {
        die "Miss option '$_' in config file\n" if not defined $conf->[0]->{$_};
    }

    # format
    foreach my $fname (keys %{ $conf->[1] }) {
        die "Bad format name '$fname' in config file" if $fname !~ /^[\w-]+$/;

        foreach (keys %{ $conf->[1]->{$fname} }) {
            die "Unknown format options '$_' in config file\n"
                if $_ !~ /^(?:output_dir|type|rotate|compress|strip|resize|codec|reencode|thumbnail)$/;

            # type
            die "Bad option '$_' for format '$fname' in config file\n"
                if $_ eq 'type' and $conf->[1]->{$fname}->{$_} !~ /^(?:photo|video)$/;

            # output_dir
            die "Bad option '$_' for format '$fname' in config file\n"
                if $_ eq 'output_dir' and $conf->[1]->{$fname}->{$_} !~ /^[\w\-\/\.]+$/;

            # rotate
            die "Bad option '$_' for format '$fname' in config file\n"
                if $_ eq 'rotate' and $conf->[1]->{$fname}->{$_} !~ /^(?:auto|90|180|270)$/;

            # reencode
            die "Bad option '$_' for format '$fname' in config file\n"
                if $_ eq 'reencode' and $conf->[1]->{$fname}->{$_} !~ /^(?:true|false)$/;

            # thumbnail
            die "Bad option '$_' for format '$fname' in config file\n"
                if $_ eq 'thumbnail' and $conf->[1]->{$fname}->{$_} !~ /^(?:true|false)$/;

            # resize
            die "Bad option '$_' for format '$fname' in config file\n"
                if $_ eq 'resize' and $conf->[1]->{$fname}->{$_} !~ /^\d+$/;

            # strip
            if ($_ eq 'strip') {
                if (ref($conf->[1]->{$fname}->{$_}) eq 'ARRAY') {
                    foreach my $tag (@{ $conf->[1]->{$fname}->{$_} }) {
                        die "Bad strip option tag '$tag' for format '$fname' in config file\n" if $tag !~ /^(?:gps|orientation)$/;
                    }
                } else {
                    die "Bad option '$_' for format '$fname' in config file\n"
                        if  $conf->[1]->{$fname}->{$_} !~ /^(?:true|false)$/;
                }
            }

            # compress
            die "Bad option '$_' for format '$fname' in config file\n"
                if $_ eq 'compress' and $conf->[1]->{$fname}->{$_} !~ /^\d+$/ and $conf->[1]->{$fname}->{$_} > 100;
        }

        die "No type defined for format '$fname' in config file\n" if not defined $conf->[1]->{$fname}->{'type'};
    }

    return 1;
}

sub check_params {

    &usage() if $opts->{'help'};

    # type
    if (defined $opts->{'type'}) {
        foreach (split(',', $opts->{'type'})) {
            die "Bad type of files to process: $_, see help (-h) for supported type\n"
                if !/^(?:photo|video)$/;
            my $found = 0;
            foreach my $k (keys %{ $conf->[1] }) {
                $found = 1 if $conf->[1]->{$k}->{'type'} eq $_;
            }
            die "No format found with type '$_'\n" if not $found;
        }
    }

    # format
    if (defined $opts->{'format'}) {
        foreach (split(',', $opts->{'format'})) {
            die "Unknown format '$_'\n" if not defined $conf->[1]->{$_};
        }
    }

    die "Incorrect parameters, see help (-h) for correct syntax\n" if @ARGV > 1;

    return 1;
}

sub get_files {

    my @files;

    if (-f $path) {
        push @files, $path;
    }
    elsif (-d $path) {
        $path .= '/' unless $path =~ /\/$/;
        opendir my $dh, $path or die "Failed to read directory \'$path\': $!\n";
        foreach (sort grep { -f ($path.$_) && !/^\./ } readdir $dh) {
            push @files, $path.$_;
        }
        closedir $dh;
    }

    return @files;
}

sub get_objects {

    my @files = &get_files();

    my $mt = MIME::Types->new();

    foreach (@files) {
        my $obj;
        my $type = $mt->mimeTypeOf($_);
        if (defined $type and $type eq 'image/jpeg') {
            next if $OPTIONS{'type'} !~ /photo/;
            $obj = Llavaud::Process::Media::Photo->new();
        }
        elsif (defined $type and $type =~ '^video\/') {
            next if $OPTIONS{'type'} !~ /video/;
            $obj = Llavaud::Process::Media::Video->new();
        }
        if (defined $obj) {
            $obj->init($_);
            push @objects, $obj;
        }
    }

    return 1;
}

sub usage {
    print << "EOF";
Usage: $0 [options...] <path>
Options:
-t,--type\t\t{photo,video}\tType of files to process (default: photo,video)
-f,--format\t\t{format1,...}\tFormat to generate (default: all format defined in config file)
-c,--config\t\t<config_file>\tConfig file to load (default: search process-media.yaml in /etc or local)
-m,--max_threads\t<num_threads>\tMaximum allowed threads (default: number of cpu(s)/core(s))
-k,--keep_name\t\t\t\tDo not rename file
-v,--verbose\t\t\t\tVerbose output
-o,--overwrite\t\t\t\tOverwrite existing files
-b,--batch\t\t\t\tRun in non-interactive mode, allowing to run in a crontab
-h,--help\t\t\t\tThis help text
EOF
    exit 0;
}

## POD

=pod

=head1 NAME

process-media

=head1 DESCRIPTION

This script will process (resize, compress...) photos and videos according to the specified options.

It depends on the following linux binary:

    * ffmpeg
    * jpeginfo

It needs the following ubuntu packages installed:

    * ffmpeg
    * jpeginfo
    * libimage-exiftool-perl
    * libimage-magick-perl
    * libmime-types-perl
    * libsys-cpu-perl
    * libterm-readkey-perl

=head1 AUTHOR

Laurent Lavaud

=cut
