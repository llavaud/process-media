#!/usr/bin/env perl

use 5.010;

use strict;
use warnings;

use File::Temp qw/tempdir/;
use Getopt::Long qw/GetOptions/;
use MIME::Types;
use Sys::CPU qw/cpu_count/;
use Term::ANSIColor;
use Term::ReadKey qw/ReadKey ReadMode/;
use threads;
use threads::shared;
use Thread::Queue;
use Time::HiRes qw/sleep/;
use YAML::Tiny;

# Own modules
use lib './lib';
use Llavaud::Process::Media::Photo;
use Llavaud::Process::Media::Video;

local $SIG{'INT'}  = \&sig_handler;

## VARS

my $config_file;
my $path;
my @objects;
my %params;
our %OPTIONS;
my $errors :shared = 0;

## MAIN

&parse_cmdline(\%params);

if (defined $params{'config'}) {
    &clean_exit("Config file \'$params{'config'}\' not found") unless -f $params{'config'};
    $config_file = $params{'config'};
} else {
    $config_file = ($0 eq '/usr/bin/process-media') ? '/etc/process-media.yaml' : 'process-media.yaml';
}

my $conf = YAML::Tiny->read($config_file);

&check_conf();

&check_params();

&set_options();

&get_objects();

if (scalar @objects == 0) {
    print "No files to process, Exiting...\n" if $OPTIONS{'batch'} eq 'false';
    &clean_exit();
} else {
    if ($OPTIONS{'batch'} eq 'false') {
        print "Found ".scalar @objects." files...\n";
        if ($OPTIONS{'inplace'} eq 'true') {
            print colored("[WARNING] You set option \"inplace\", original file will be overwrited !!!", 'bright_white on_red'), "\n";
        }
        ReadMode 4;
        my $key = '';
        while($key !~ /^(?:y|n)$/) {
            1 while defined ReadKey -1; # discard any previous input
            print "Proceed ? (y/n): ";
            $key = ReadKey 0;
            print "$key\n";
        }
        ReadMode 0;

        &clean_exit() if $key ne 'y';
    }
}

my $queue_todo = Thread::Queue->new();
my $queue_done = Thread::Queue->new();

my $run: shared = 1;
$queue_todo->enqueue($_) for @objects;

# start threads
while ($OPTIONS{'max_threads'} >= 1) {
    threads->new(\&thread);
    $OPTIONS{'max_threads'}--;
}

# wait first run to finish
sleep 0.05 while $queue_done->pending() < scalar @objects;

$queue_done->end;

# search duplicate name
'Llavaud::Process::Media::Photo'->search_duplicate(@objects);
'Llavaud::Process::Media::Video'->search_duplicate(@objects);

$run = 2;
$queue_todo->enqueue($_) for @objects;
$queue_todo->end;

# waiting for threads to finish
my $running_threads = scalar threads->list();
while ($running_threads) {
    for my $thread (threads->list(threads::joinable)) {
        $thread->join();
        $running_threads--;
    }
    sleep 1;
}

print "Finished with $errors errors\n" if $OPTIONS{'verbose'} eq 'true' or $errors > 0;

&clean_exit();

## FUNCTIONS

sub thread {

    local $SIG{'INT'} = sub { threads->exit(); };

    while (my $obj = $queue_todo->dequeue) {
        if ($run == 1) {
            $errors++ unless $obj->get_name();
            $queue_done->enqueue($obj)
        }
        elsif ($run == 2) {
            $errors++ unless $obj->exist();
            $errors++ unless $obj->create();
            $errors++ unless $obj->process();
            $errors++ unless $obj->strip();
            if (ref($obj) eq 'Llavaud::Process::Media::Video') {
                $errors++ unless $obj->thumbnail();
            }
            $errors++ unless $obj->integrity();
            if ($OPTIONS{'inplace'} eq 'true') {
                $errors++ unless $obj->inplace();
            }
        }
    }

    return 1;
}

sub parse_cmdline {

    my $params_ref = shift;

    GetOptions(
        'type=s'        => \$params_ref->{'type'},
        'format=s'      => \$params_ref->{'format'},
        'config=s'      => \$params_ref->{'config'},
        'inplace'       => \$params_ref->{'inplace'},
        'max_threads=i' => \$params_ref->{'max_threads'},
        'tzoffset=i'    => \$params_ref->{'tzoffset'},
        'batch'         => \$params_ref->{'batch'},
        'keep_name'     => \$params_ref->{'keep_name'},
        'verbose'       => \$params_ref->{'verbose'},
        'overwrite'     => \$params_ref->{'overwrite'},
        'help'          => \$params_ref->{'help'},
    ) or &clean_exit("Error in command line arguments");

    return 1;
}

sub sig_handler {
    my $signame = shift;

    local $SIG{'INT'} = 'IGNORE';

    print "Received SIG$signame, Exiting...";

    # send SIGINT to all running threads,
    # now we are waiting for threads to finish properly
    #Â instead of detaching it because it can lead to several residual temp file 
    foreach my $thr (threads->list) {
        $thr->kill('INT')->join();
    }

    # ffmpeg messes up terminal, this is a workaround
    system('stty sane');

    &clean_exit();
}

sub set_options {

    $path = $ARGV[0] // './';

    # tmpdir
    $OPTIONS{'tmpdir'} = File::Temp->newdir('process-media-XXXXXXXXXXXXX', DIR => $conf->[0]->{'tmpdir'})->dirname;

    # max_threads
    if (defined $params{'max_threads'}) {
        $OPTIONS{'max_threads'} = ($params{'max_threads'} == 0) ? Sys::CPU::cpu_count() : $params{'max_threads'};
    } else {
        $OPTIONS{'max_threads'} = ($conf->[0]->{'max_threads'} == 0) ? Sys::CPU::cpu_count() : $conf->[0]->{'max_threads'};
    }

    # tzoffset
    $OPTIONS{'tzoffset'} = $params{'tzoffset'} ? $params{'tzoffset'} : $conf->[0]->{'tzoffset'};

    # verbose
    $OPTIONS{'verbose'} = $params{'verbose'} ? 'true' : $conf->[0]->{'verbose'};

    # overwrite
    $OPTIONS{'overwrite'} = $params{'overwrite'} ? 'true' : $conf->[0]->{'overwrite'};

    # inplace
    $OPTIONS{'inplace'} = $params{'inplace'} ? 'true' : 'false';

    # keep_name
    $OPTIONS{'keep_name'} = $params{'keep_name'} ? 'true' : $conf->[0]->{'keep_name'};

    # batch
    $OPTIONS{'batch'} = $params{'batch'} ? 'true' : 'false';

    $OPTIONS{'type'} = $params{'type'} // '';

    if (not defined $params{'type'}) {
        if (defined $params{'format'}) {
            my %t;
            foreach (split(',', $params{'format'})) {
                $t{$conf->[1]->{$_}->{'type'}} = 1;
            }
            $OPTIONS{'type'} = join(',', keys %t);
        } else {
            my %t;
            foreach (keys %{ $conf->[1] }) {
                $t{$conf->[1]->{$_}->{'type'}} = 1;
            }
            $OPTIONS{'type'} = join(',', keys %t);
        }
    }

    if (defined $params{'format'}) {
        foreach my $fname (split(',', $params{'format'})) {
            foreach my $t (split(',', $OPTIONS{'type'})) {
                $OPTIONS{'format'}{$fname} = $conf->[1]->{$fname}
                if $conf->[1]->{$fname}->{'type'} eq $t;
            }
        }
    } else {
        foreach my $fname (keys %{ $conf->[1] }) {
            foreach my $t (split(',', $OPTIONS{'type'})) {
                $OPTIONS{'format'}{$fname} = $conf->[1]->{$fname}
                if $conf->[1]->{$fname}->{'type'} eq $t;
            }
        }
    }

    &clean_exit("No format found with your type and format combination")
    if not exists $OPTIONS{'format'};

    return 1;
}

sub check_conf {

    my %o = (
        'max_threads' => '^\d+$',
        'tzoffset'    => '^(\-|\+)?\d+$',
        'keep_name'   => '^(?:true|false)$',
        'verbose'     => '^(?:true|false)$',
        'overwrite'   => '^(?:true|false)$',
        'tmpdir'      => '^[\w\-\/\.]+$',
    );

    # options
    foreach (keys %{ $conf->[0] }) {
        &clean_exit("Unknown option '$_' in config file")
        if not exists $o{$_};

        &clean_exit("Bad value '$conf->[0]->{$_}' for option '$_' in config file")
        if $conf->[0]->{$_} !~ /$o{$_}/;
    }

    foreach (keys %o) {
        &clean_exit("Miss option '$_' in config file") if not defined $conf->[0]->{$_};
    }

    my %f = (
        'type'          => '^(?:photo|video)$',
        'rotate'        => '^(?:auto|90|180|270)$',
        'compress'      => '^(?:100|[1-9]?[0-9])$',
        'strip'         => '^(?:true|false)$',
        'strip_exclude' => '^(?:orientation|gps|,)+$',
        'progressive'   => '^(?:true|false)$',
        'resize'        => '^\d+$',
        'vcodec'        => '^x26[45]$',
        'vcodec_params' => '^[\w\:\=]+$',
        'reencode'      => '^(?:true|false)$',
        'thumbnail'     => '^(?:true|false)$',
        'output_dir'    => '^[\w\-\/\.]+$',
    );

    # format
    foreach my $fname (keys %{ $conf->[1] }) {
        &clean_exit("Bad format name '$fname' in config file") if $fname !~ /^[\w-]+$/;

        foreach (keys %{ $conf->[1]->{$fname} }) {
            &clean_exit("Unknown option '$_' in format '$fname' in config file")
            if not exists $f{$_};
            &clean_exit("Bad value '$conf->[1]->{$fname}->{$_}' for option '$_' in format '$fname' in config file")
            if $conf->[1]->{$fname}->{$_} !~ /$f{$_}/;
        }

        &clean_exit("No type defined for format '$fname' in config file")
        if not defined $conf->[1]->{$fname}->{'type'};
    }

    return 1;
}

sub check_params {

    &usage() if $params{'help'};

    # type
    if (defined $params{'type'}) {
        foreach (split(',', $params{'type'})) {
            &clean_exit("Bad type of files to process: $_, see help (-h) for supported type")
            if !/^(?:photo|video)$/;
            my $found = 0;
            foreach my $k (keys %{ $conf->[1] }) {
                $found = 1 if $conf->[1]->{$k}->{'type'} eq $_;
            }
            &clean_exit("No format found with type '$_'") if not $found;
        }
    }

    # format
    if (defined $params{'format'}) {
        foreach (split(',', $params{'format'})) {
            &clean_exit("Unknown format '$_'") if not defined $conf->[1]->{$_};
        }
    }

    # inplace
    if (defined $params{'inplace'} and not defined $params{'format'}) {
        &clean_exit("You must specify a format if you want to use the \"inplace\" option");
    }

    &clean_exit("Incorrect parameters, see help (-h) for correct syntax") if @ARGV > 1;

    return 1;
}

sub get_files {

    my @files;

    if (-f $path) {
        push @files, $path;
    }
    elsif (-d $path) {
        $path .= '/' unless $path =~ /\/$/;
        opendir my $dh, $path or &clean_exit("Failed to read directory \'$path\': $!");
        foreach (sort grep { -f ($path.$_) && !/^\./ } readdir $dh) {
            push @files, $path.$_;
        }
        closedir $dh;
    }

    return @files;
}

sub get_objects {

    my @files = &get_files();

    my $mt = MIME::Types->new();

    foreach (@files) {
        my $obj;
        my $type = $mt->mimeTypeOf($_);
        if (defined $type and $type eq 'image/jpeg') {
            next if $OPTIONS{'type'} !~ /photo/;
            $obj = Llavaud::Process::Media::Photo->new();
        }
        elsif (defined $type and $type =~ /^(application\/mp4|video\/)/) {
            next if $OPTIONS{'type'} !~ /video/;
            $obj = Llavaud::Process::Media::Video->new();
        }
        if (defined $obj) {
            $obj->init($_);
            push @objects, $obj;
        }
    }

    return 1;
}

sub clean_exit {
    my $msg = shift;

    local $SIG{'INT'} = 'DEFAULT';

    if (defined $msg) {
        chomp $msg;
        die "$msg\n";
    } else {
        exit 0;
    }
}

sub usage {
    print << "EOF";

Usage: $0 <path> [options]

<path> is the path to photos or videos to process

Options:
-t,--type        {photo,video}  Type of files to process (default: photo,video)
-f,--format      {format1,...}  Format to generate (default: all format defined in config file)
-c,--config      <config_file>  Config file to load (default: search local process-media.yaml file or in /etc)
-m,--max_threads <num_threads>  Maximum allowed threads (default: number of cpu(s)/core(s))
-tz,--tzoffset                  Allow to change the default timezone offset used to rename file(s) (in seconds)
-k,--keep_name                  Do not rename file
-v,--verbose                    Verbose output
-o,--overwrite                  Overwrite existing files
-i,--inplace                    Replace original file instead of writing to output_dir (specifying a format is mandatory)
-b,--batch                      Run in non-interactive mode, allowing to run in a crontab
-h,--help                       This help text

EOF
    exit 0;
}

## POD

=pod

=head1 NAME

process-media

=head1 DESCRIPTION

This script will process (resize, compress...) photos and videos according to the specified options.

It depends on the following linux binary:

    * jpeginfo

It needs the following ubuntu packages installed:

    * jpeginfo
    * libimage-exiftool-perl
    * libimage-magick-perl
    * libmime-types-perl
    * libsys-cpu-perl
    * libterm-readkey-perl
    * libyaml-tiny-perl

=head1 AUTHOR

Laurent Lavaud

=cut
